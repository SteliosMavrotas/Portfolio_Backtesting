#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Apr 25 14:16:11 2020
@author: SteliosMavrotas
"""

import pandas as pd
import yfinance as yf
import numpy as np
import matplotlib.pyplot as plt
import statistics as stc
import math
import seaborn as snb
import itertools

def accessdata(stocklist):
    d,dates=[],[]
    for i in stocklist:
        a=yf.Ticker(i)
        prices=a.history(period='max',interval='1d')
        prices=prices.drop(prices.index[np.where(prices.index<'2008-01-07 00:00:00')])
        allData[i]=prices['Close']
        prices.to_csv('InvestingDGR/'+i+'.csv')
        d.append(min(prices.index))
        dates.append(i+" "+str(min(prices.index)))
        allData.index=prices.index
        
    return allData
        
def rebalance(index,allData,stocklist):
    loc=allData.index.get_loc(index)
    
    if str(index)=='2008-01-07 00:00:00':
        allData['Value'][index]=initialCapital
        "Total Value at t=0"
        
        for i in stocklist:
            allData['Shares '+i][index]=round(allData['Value'][index]*dic[i]/allData[i][index],0)
            "Shares at t=0 == Roundown(total value*weight/price)"
            
            allData['Value '+i][index]=allData['Shares '+i][index]*allData[i][index]
            "Calculating individual value at t=0"
        
    else:
        
        for i in stocklist:
            
            allData['Shares '+i][index]=round(allData['Value'][allData.index.get_loc(index)-1]\
                                          *dic[i]/allData[i][index],0)
            "Shares at t=t == Roundown(total value(t-1)*weight/price)"
            
            allData['Value '+i][index]=allData['Shares '+i][index]*allData[i][index]
            "Calculating individual value at t=t"
            
        allData['Cash'][index]=allData['Cash'][allData.index.get_loc(index)-1]
        "Adds cash balance of the previous day"
        
        allData['Cash'][index]+=-sum([(allData['Shares '+i][index]-\
                                  allData['Shares '+i][allData.index.get_loc(index)-1])*\
                                 allData[i][index] for i in stocklist])
        "Calculates the cash balance at t=t"
        
        allData['Value'][index]=sum([allData['Value '+i][index] for i in stocklist])\
            +allData['Cash'][index]
    
    if str(index)=='2008-01-07 00:00:00':
        
        allData['Cash'][index]=allData['Value'][index]- \
            sum([allData['Value '+i][index] for i in stocklist]) 
        "Cash at t=0"
    
    return allData

def initialize(stocklist):
    "Used to initialise the collumns to 0"
    
    for i in stocklist:
        allData['Value '+i]=pd.DataFrame(np.zeros(len(allData)))
        allData['Shares '+i]=pd.DataFrame(np.zeros(len(allData)))
        
    allData['Value']=pd.DataFrame(np.zeros(len(allData))).fillna(0)
    allData['Cash']=pd.DataFrame(np.zeros(len(allData)))
    
    return allData

def computeParameters(stocklist,allData):
    "To compute in Normal events (Not Start and Rebalacing)"
    allData['Value'][index]=0
    
    for i in stocklist:
        allData['Shares '+i][index]=allData['Shares '+i][allData.index.get_loc(index)-1]
        "Computes individual shares at t=t"
        
        allData['Value '+i][index]=allData['Shares '+i][index]*allData[i][index]
        "Computes individual values at t=t"
        
        allData['Value'][index]+=allData['Value '+i][index]
        "Adds sum of individual values to the total value at t=t"
        
    allData['Cash'][index]=allData['Cash'][allData.index.get_loc(index)-1]
    "Adds the cash balance of t-1"
    
    allData['Cash'][index]+=-sum([(allData['Shares '+i][index]-\
                                  allData['Shares '+i][allData.index.get_loc(index)-1])*\
                                 allData[i][index] for i in stocklist])
    "Computes cash position at t=t"
        
    allData['Value'][index]+=allData['Cash'][index]
    "Adds cash to the total value at t=t"
    
    return allData

def computeCorrelationMatrix(allData,stocklist):
    """Used to compute the covariance matrix and standard deviation for 
    each stock of the stock choices"""
    
    correlation=allData[[i for i in stocklist]]
    
    correlation=pd.DataFrame({y:x for y,x in zip(stocklist,np.corrcoef(correlation,rowvar=False))})
    
    correlation["index"]=pd.DataFrame(stocklist)
    correlation=correlation.set_index("index")
    
    "Create legends for the heatmap of the correlation matrix"
    
    combinations=np.array([i[0]+i[1] for i in list(itertools.product(stocklist,repeat=2))])
    '''shape(9,9)'''
    
    "Create a correlation matrix with the stock choises"
    
    snb.heatmap(correlation,cmap='Spectral')
    
    return correlation


def calculateStockReturns(allData,stocklist):
    
    "Function to plot stock returns over standard deviation"
    
    stockStd=pd.DataFrame({"Standard Deviation":[stc.stdev(allData[i])/math.sqrt(252)\
                           for i in stocklist],"index":stocklist})
    stockStd=stockStd.set_index("index")
    
    stockRtrn=[(allData['Value '+i][len(allData)-1]-allData['Value '+i][0])/\
               allData['Value '+i][0] for i in stocklist]
        
    stockRtrn=pd.DataFrame({"Returns":[(1+i)**(1/(len(allData)/252))-1 for i in stockRtrn],\
                           "index":stocklist})
    
    stockRtrn=stockRtrn.set_index('index')
    
    "Creating a graph of returns over standard deviation to optimise portfolio"
    
    plt.xlabel('Standard Deviation')

    plt.ylabel('Stock Returns') 
    
    plt.title('Stock Returns over Standard Deviation')
    plt.plot(stockStd,stockRtrn)
    
    return stockStd,stockRtrn

if __name__=="__main__":
    stocklist=['TLT','SPEM','IVV','XLF','XLY','XLI','IAU','SLV','USO']
    PortfolioWeights=[0.1,0.1,0.2,0.07,0.07,0.07,0.05,0.15,0.20]
    dic=dict(zip(stocklist,PortfolioWeights))
    
    count=-1
    
    allData=pd.DataFrame([])
    allData=accessdata(stocklist)
    initialCapital=1000

    allData=initialize(stocklist)
    
    correlation=computeCorrelationMatrix(allData,stocklist)
    
    for index,row in allData.iterrows():
        loc=allData.index.get_loc(index)
        print(round(abs(abs(loc-len(allData))/len(allData)-1)*100))
    
        if count==-1:
            allData=rebalance(index,allData,stocklist)
            count+=1
            
        elif count==30:
            allData=rebalance(index,allData,stocklist)
            count=0
        else:
            allData=computeParameters(stocklist, allData)
            count+=1
    
    stockStd,stockRtrn=calculateStockReturns(allData,stocklist)
    
    rtn=(allData['Value'][len(allData)-1]-initialCapital)/initialCapital
    AnnualisedReturn=(1+rtn)**(1/(len(allData)/252))-1
    std=stc.stdev(allData['Value'])/math.sqrt(252)
    SharpeRatio=(AnnualisedReturn-0.6)/std
    
    plt.plot(allData['Value'])
    print("Annualised Standard Deviation: " + str(std))
    print("Annualised Return: " + str(AnnualisedReturn))
    print("Sharpe Ratio: "+str(SharpeRatio))
